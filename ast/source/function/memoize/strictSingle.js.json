{
  "type": "File",
  "start": 0,
  "end": 760,
  "loc": {
    "start": {
      "line": 1,
      "column": 0
    },
    "end": {
      "line": 20,
      "column": 0
    }
  },
  "program": {
    "type": "Program",
    "start": 0,
    "end": 760,
    "loc": {
      "start": {
        "line": 1,
        "column": 0
      },
      "end": {
        "line": 20,
        "column": 0
      }
    },
    "sourceType": "module",
    "body": [
      {
        "type": "ImportDeclaration",
        "start": 0,
        "end": 33,
        "loc": {
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 33
          }
        },
        "specifiers": [
          {
            "type": "ImportDefaultSpecifier",
            "start": 7,
            "end": 18,
            "loc": {
              "start": {
                "line": 1,
                "column": 7
              },
              "end": {
                "line": 1,
                "column": 18
              }
            },
            "local": {
              "type": "Identifier",
              "start": 7,
              "end": 18,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 7
                },
                "end": {
                  "line": 1,
                  "column": 18
                },
                "identifierName": "memoizeWith"
              },
              "name": "memoizeWith"
            }
          }
        ],
        "source": {
          "type": "StringLiteral",
          "start": 24,
          "end": 32,
          "loc": {
            "start": {
              "line": 1,
              "column": 24
            },
            "end": {
              "line": 1,
              "column": 32
            }
          },
          "extra": {
            "rawValue": "./with",
            "raw": "'./with'"
          },
          "value": "./with"
        }
      },
      {
        "type": "ImportDeclaration",
        "start": 35,
        "end": 70,
        "loc": {
          "start": {
            "line": 2,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 35
          }
        },
        "specifiers": [
          {
            "type": "ImportDefaultSpecifier",
            "start": 42,
            "end": 50,
            "loc": {
              "start": {
                "line": 2,
                "column": 7
              },
              "end": {
                "line": 2,
                "column": 15
              }
            },
            "local": {
              "type": "Identifier",
              "start": 42,
              "end": 50,
              "loc": {
                "start": {
                  "line": 2,
                  "column": 7
                },
                "end": {
                  "line": 2,
                  "column": 15
                },
                "identifierName": "identity"
              },
              "name": "identity"
            }
          }
        ],
        "source": {
          "type": "StringLiteral",
          "start": 56,
          "end": 69,
          "loc": {
            "start": {
              "line": 2,
              "column": 21
            },
            "end": {
              "line": 2,
              "column": 34
            }
          },
          "extra": {
            "rawValue": "../identity",
            "raw": "'../identity'"
          },
          "value": "../identity"
        },
        "trailingComments": [
          {
            "type": "CommentBlock",
            "value": "*\r\n * Memoize functions with single argument of non-primitive argument.\r\n * Uses Map instance for cache, because it's keys can be non-primitive.\r\n * Use it when strict equality (===) for cache lookup is enough.\r\n * It suitable for functions with single argument of primitive type too.\r\n *\r\n * @param {Function} fn\r\n * @returns {Function}\r\n * @example\r\n *     const addFlag = obj => ({...obj, flag: true });\r\n *     const memoize = memoizeStrictSingle(addFlag));\r\n *     const test = {test: 1};\r\n *     memoize(test); // from addFlag call\r\n *     memoize({test: 1}); // from addFlag call\r\n *     memoize(test); // from cache\r\n ",
            "start": 72,
            "end": 702,
            "loc": {
              "start": {
                "line": 3,
                "column": 0
              },
              "end": {
                "line": 18,
                "column": 3
              }
            }
          }
        ]
      },
      {
        "type": "ExportDefaultDeclaration",
        "start": 704,
        "end": 758,
        "loc": {
          "start": {
            "line": 19,
            "column": 0
          },
          "end": {
            "line": 19,
            "column": 54
          }
        },
        "declaration": {
          "type": "CallExpression",
          "start": 719,
          "end": 757,
          "loc": {
            "start": {
              "line": 19,
              "column": 15
            },
            "end": {
              "line": 19,
              "column": 53
            }
          },
          "callee": {
            "type": "Identifier",
            "start": 719,
            "end": 730,
            "loc": {
              "start": {
                "line": 19,
                "column": 15
              },
              "end": {
                "line": 19,
                "column": 26
              },
              "identifierName": "memoizeWith"
            },
            "name": "memoizeWith",
            "leadingComments": null
          },
          "arguments": [
            {
              "type": "ArrowFunctionExpression",
              "start": 731,
              "end": 746,
              "loc": {
                "start": {
                  "line": 19,
                  "column": 27
                },
                "end": {
                  "line": 19,
                  "column": 42
                }
              },
              "id": null,
              "generator": false,
              "expression": true,
              "async": false,
              "params": [],
              "body": {
                "type": "NewExpression",
                "start": 737,
                "end": 746,
                "loc": {
                  "start": {
                    "line": 19,
                    "column": 33
                  },
                  "end": {
                    "line": 19,
                    "column": 42
                  }
                },
                "callee": {
                  "type": "Identifier",
                  "start": 741,
                  "end": 744,
                  "loc": {
                    "start": {
                      "line": 19,
                      "column": 37
                    },
                    "end": {
                      "line": 19,
                      "column": 40
                    },
                    "identifierName": "Map"
                  },
                  "name": "Map"
                },
                "arguments": []
              }
            },
            {
              "type": "Identifier",
              "start": 748,
              "end": 756,
              "loc": {
                "start": {
                  "line": 19,
                  "column": 44
                },
                "end": {
                  "line": 19,
                  "column": 52
                },
                "identifierName": "identity"
              },
              "name": "identity"
            }
          ],
          "leadingComments": [
            {
              "type": "CommentBlock",
              "value": "*\r\n * Memoize functions with single argument of non-primitive argument.\r\n * Uses Map instance for cache, because it's keys can be non-primitive.\r\n * Use it when strict equality (===) for cache lookup is enough.\r\n * It suitable for functions with single argument of primitive type too.\r\n *\r\n * @param {Function} fn\r\n * @returns {Function}\r\n * @example\r\n *     const addFlag = obj => ({...obj, flag: true });\r\n *     const memoize = memoizeStrictSingle(addFlag));\r\n *     const test = {test: 1};\r\n *     memoize(test); // from addFlag call\r\n *     memoize({test: 1}); // from addFlag call\r\n *     memoize(test); // from cache\r\n ",
              "start": 72,
              "end": 702,
              "loc": {
                "start": {
                  "line": 3,
                  "column": 0
                },
                "end": {
                  "line": 18,
                  "column": 3
                }
              }
            }
          ],
          "trailingComments": []
        },
        "leadingComments": [
          {
            "type": "CommentBlock",
            "value": "*\r\n * Memoize functions with single argument of non-primitive argument.\r\n * Uses Map instance for cache, because it's keys can be non-primitive.\r\n * Use it when strict equality (===) for cache lookup is enough.\r\n * It suitable for functions with single argument of primitive type too.\r\n *\r\n * @param {Function} fn\r\n * @returns {Function}\r\n * @example\r\n *     const addFlag = obj => ({...obj, flag: true });\r\n *     const memoize = memoizeStrictSingle(addFlag));\r\n *     const test = {test: 1};\r\n *     memoize(test); // from addFlag call\r\n *     memoize({test: 1}); // from addFlag call\r\n *     memoize(test); // from cache\r\n ",
            "start": 72,
            "end": 702,
            "loc": {
              "start": {
                "line": 3,
                "column": 0
              },
              "end": {
                "line": 18,
                "column": 3
              }
            }
          }
        ]
      }
    ],
    "directives": []
  },
  "comments": [
    {
      "type": "CommentBlock",
      "value": "*\r\n * Memoize functions with single argument of non-primitive argument.\r\n * Uses Map instance for cache, because it's keys can be non-primitive.\r\n * Use it when strict equality (===) for cache lookup is enough.\r\n * It suitable for functions with single argument of primitive type too.\r\n *\r\n * @param {Function} fn\r\n * @returns {Function}\r\n * @example\r\n *     const addFlag = obj => ({...obj, flag: true });\r\n *     const memoize = memoizeStrictSingle(addFlag));\r\n *     const test = {test: 1};\r\n *     memoize(test); // from addFlag call\r\n *     memoize({test: 1}); // from addFlag call\r\n *     memoize(test); // from cache\r\n ",
      "start": 72,
      "end": 702,
      "loc": {
        "start": {
          "line": 3,
          "column": 0
        },
        "end": {
          "line": 18,
          "column": 3
        }
      }
    }
  ],
  "tokens": [
    {
      "type": {
        "label": "import",
        "keyword": "import",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "import",
      "start": 0,
      "end": 6,
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 1,
          "column": 6
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "memoizeWith",
      "start": 7,
      "end": 18,
      "loc": {
        "start": {
          "line": 1,
          "column": 7
        },
        "end": {
          "line": 1,
          "column": 18
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "from",
      "start": 19,
      "end": 23,
      "loc": {
        "start": {
          "line": 1,
          "column": 19
        },
        "end": {
          "line": 1,
          "column": 23
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "./with",
      "start": 24,
      "end": 32,
      "loc": {
        "start": {
          "line": 1,
          "column": 24
        },
        "end": {
          "line": 1,
          "column": 32
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 32,
      "end": 33,
      "loc": {
        "start": {
          "line": 1,
          "column": 32
        },
        "end": {
          "line": 1,
          "column": 33
        }
      }
    },
    {
      "type": {
        "label": "import",
        "keyword": "import",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "import",
      "start": 35,
      "end": 41,
      "loc": {
        "start": {
          "line": 2,
          "column": 0
        },
        "end": {
          "line": 2,
          "column": 6
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "identity",
      "start": 42,
      "end": 50,
      "loc": {
        "start": {
          "line": 2,
          "column": 7
        },
        "end": {
          "line": 2,
          "column": 15
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "from",
      "start": 51,
      "end": 55,
      "loc": {
        "start": {
          "line": 2,
          "column": 16
        },
        "end": {
          "line": 2,
          "column": 20
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "../identity",
      "start": 56,
      "end": 69,
      "loc": {
        "start": {
          "line": 2,
          "column": 21
        },
        "end": {
          "line": 2,
          "column": 34
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 69,
      "end": 70,
      "loc": {
        "start": {
          "line": 2,
          "column": 34
        },
        "end": {
          "line": 2,
          "column": 35
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\r\n * Memoize functions with single argument of non-primitive argument.\r\n * Uses Map instance for cache, because it's keys can be non-primitive.\r\n * Use it when strict equality (===) for cache lookup is enough.\r\n * It suitable for functions with single argument of primitive type too.\r\n *\r\n * @param {Function} fn\r\n * @returns {Function}\r\n * @example\r\n *     const addFlag = obj => ({...obj, flag: true });\r\n *     const memoize = memoizeStrictSingle(addFlag));\r\n *     const test = {test: 1};\r\n *     memoize(test); // from addFlag call\r\n *     memoize({test: 1}); // from addFlag call\r\n *     memoize(test); // from cache\r\n ",
      "start": 72,
      "end": 702,
      "loc": {
        "start": {
          "line": 3,
          "column": 0
        },
        "end": {
          "line": 18,
          "column": 3
        }
      }
    },
    {
      "type": {
        "label": "export",
        "keyword": "export",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "export",
      "start": 704,
      "end": 710,
      "loc": {
        "start": {
          "line": 19,
          "column": 0
        },
        "end": {
          "line": 19,
          "column": 6
        }
      }
    },
    {
      "type": {
        "label": "default",
        "keyword": "default",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "default",
      "start": 711,
      "end": 718,
      "loc": {
        "start": {
          "line": 19,
          "column": 7
        },
        "end": {
          "line": 19,
          "column": 14
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "memoizeWith",
      "start": 719,
      "end": 730,
      "loc": {
        "start": {
          "line": 19,
          "column": 15
        },
        "end": {
          "line": 19,
          "column": 26
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 730,
      "end": 731,
      "loc": {
        "start": {
          "line": 19,
          "column": 26
        },
        "end": {
          "line": 19,
          "column": 27
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 731,
      "end": 732,
      "loc": {
        "start": {
          "line": 19,
          "column": 27
        },
        "end": {
          "line": 19,
          "column": 28
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 732,
      "end": 733,
      "loc": {
        "start": {
          "line": 19,
          "column": 28
        },
        "end": {
          "line": 19,
          "column": 29
        }
      }
    },
    {
      "type": {
        "label": "=>",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 734,
      "end": 736,
      "loc": {
        "start": {
          "line": 19,
          "column": 30
        },
        "end": {
          "line": 19,
          "column": 32
        }
      }
    },
    {
      "type": {
        "label": "new",
        "keyword": "new",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "new",
      "start": 737,
      "end": 740,
      "loc": {
        "start": {
          "line": 19,
          "column": 33
        },
        "end": {
          "line": 19,
          "column": 36
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "Map",
      "start": 741,
      "end": 744,
      "loc": {
        "start": {
          "line": 19,
          "column": 37
        },
        "end": {
          "line": 19,
          "column": 40
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 744,
      "end": 745,
      "loc": {
        "start": {
          "line": 19,
          "column": 40
        },
        "end": {
          "line": 19,
          "column": 41
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 745,
      "end": 746,
      "loc": {
        "start": {
          "line": 19,
          "column": 41
        },
        "end": {
          "line": 19,
          "column": 42
        }
      }
    },
    {
      "type": {
        "label": ",",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 746,
      "end": 747,
      "loc": {
        "start": {
          "line": 19,
          "column": 42
        },
        "end": {
          "line": 19,
          "column": 43
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "identity",
      "start": 748,
      "end": 756,
      "loc": {
        "start": {
          "line": 19,
          "column": 44
        },
        "end": {
          "line": 19,
          "column": 52
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 756,
      "end": 757,
      "loc": {
        "start": {
          "line": 19,
          "column": 52
        },
        "end": {
          "line": 19,
          "column": 53
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 757,
      "end": 758,
      "loc": {
        "start": {
          "line": 19,
          "column": 53
        },
        "end": {
          "line": 19,
          "column": 54
        }
      }
    },
    {
      "type": {
        "label": "eof",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 760,
      "end": 760,
      "loc": {
        "start": {
          "line": 20,
          "column": 0
        },
        "end": {
          "line": 20,
          "column": 0
        }
      }
    }
  ]
}